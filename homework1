// 1. หาค่าต่ำสุดในอาร์เรย์

function findMin(arr) {
  let min = arr[0];
  for (let i = 1; i < arr.length; i++) {
    if (arr[i] < min) {
      min = arr[i];
    }
  }
  return min;
}

const numbers = [34, 1, 58, 8, 21, 5, 13, 3, 89, 7];

console.log(findMin(numbers)); // 1

// 2.แปลง numString เป็นจำนวนเต็ม
let numString = "1234";

let num = parseInt(numString);

console.log(typeof num); // Number

// 3. สลับค่าตัวแปร a และ b โดยใช้ array destructuring
let a = 5,
  b = 10;

[a, b] = [b, a];

console.log(a); // 10
console.log(b); // 5

// 4. ตรวจสอบว่าอาร์เรย์ว่างเปล่า
let value1 = [1, 2, 3];

let value2 = [];

let value3;

console.log(Array.isArray(value1) && value1.length === 0); // false
console.log(Array.isArray(value2) && value2.length === 0); // true
console.log(value3 === undefined); // true

// 5.แสดงเฉพาะ object elements ใน mixedArray
const mixedArray = [
  42,
  "hello",
  { name: "Joe", surname: "Doe" },
  true,
  56,
  false,
  { name: "John", surname: "Smith" },
  { name: "Joy", surname: "Stein" }
];

const objectElements = mixedArray.filter(
  (element) => typeof element === "object"
);

console.log(objectElements);

// 6.x เป็น number
// y เป็น string
// เมื่อ + ใช้กับ number และ string ผลลัพธ์จะแปลง number เป็น string
// "10" + "20" = "30"
// 7.1 เพิ่ม property ใหม่ hobbies
//  {
//     const vowels = [aeiou];
//     const result = {}
const person = {
  name: "Alice",
  age: 25,
  isStudent: true
};

person.hobbies = ["reading", "writing", "swimming"];

console.log(person);
// 7.2 เพิ่ม property ใหม่ hobbies
person.age = 26;

console.log(person);
// 7.3 ลบ property isStudent
delete person.isStudent;

console.log(person);
// 8.การเปรียบเทียบวัตถุ
JavaScript;
// XXXXX: What is you think about result

if (1) {
  console.log(1); // XXXXX
}

console.log([]); // XXXXX

if ("") {
  console.log(""); // XXXXX
}

if (null) {
  console.log(null); // XXXXX
}

if (undefined) {
  console.log(undefined); // XXXXX
}

//     for (index = 0; index < word.length; index++) {
//       const char = word[index].toLowerCase()

// 9.XXXXX: Compare three objects with name properties (case-insensitive).

let peopleObj1 = { name: "John", surname: "Doe" },
  peopleObj2 = { name: "Sarah", surname: "Wilson" },
  peopleObj3 = { name: "David", surname: "Brown" };

if (XXXXX) {
  console.log("These two objects have the same name.");
}
// 1 จะปรากฏบนคอนโซล เพราะ if (1) เป็น true
// [] จะปรากฏบนคอนโซล เพราะ console.log([]) prints an empty array
// "" จะปรากฏบนคอนโซล เพราะ if ("") เป็น true
// null จะปรากฏบนคอนโซล เพราะ if (null) เป็น true
// undefined จะปรากฏบนคอนโซล เพราะ if (undefined) เป็น true

// 10.โจทย์: แสดงชื่อทั้งหมดของบุคคลในออบเจ็กต์ "people" ที่มีชื่อซ้ำกัน
// (ไม่แยกแยะตัวพิมพ์ใหญ่ตัวพิมพ์เล็ก) โดยให้ผลลัพธ์เป็นอาร์เรย์ของสตริงที่มีชื่อที่ซ้ำกัน
// XXXXX is your code
//       if (vowels.includes(char)) {
//         if (!result[char]) {
//           result[char] = [index.toString()];

let people = [
  { name: "John", surname: "Doe" },
  { name: "olivia", surname: "Smith" },
  { name: "john", surname: "Johnson" },
  { name: "Sarah", surname: "Wilson" },
  { name: "David", surname: "Brown" },
  { name: "Emily", surname: "Davis" },
  { name: "David", surname: "Miller" },
  { name: "Olivia", surname: "Taylor" },
  { name: "david", surname: "Anderson" },
  { name: "Sophia", surname: "Clark" }
];

let result = XXXXX;
console.log(result); // ["john", "olivia", "david"]

function findDuplicateNames(people) {
  const names = people.map((person) => person.name.toLowerCase());
  const uniqueNames = new Set(names);
  const duplicateNames = [];
  for (const name of names) {
    if (uniqueNames.has(name) && !duplicateNames.includes(name)) {
      duplicateNames.push(name);
      uniqueNames.delete(name);
    }
  }
  return duplicateNames;
}

const result = findDuplicateNames(people);
console.log(result); // ["john", "olivia", "david"]

// 11.อะไรคือผลลัพธ์ของโค้ดด้านล่าง และทำไมจึงแสดงผลลัพธ์นั้น
// อธิบายว่าทำไมการแก้ไขบรรทัดที่ 4 และ 7 ไม่ได้ผล
//         } else result[char].push(index.toString());
//       }
//     }
//     return result;
//   }
const arr = [1, 2, 3];

// 1.
arr.push(4); // XXXXX

// 2.
arr = [1, 2, 3, 4]; // XXXXX

const obj = { name: "Alice" };

// 3.
obj.age = 30; // XXXXX

// 4.
obj = { name: "Alice", age: 30 }; // XXXXX

// 12. ฟังก์ชัน uniqueElements(arrayValue) ใช้เพื่อดึงอาร์เรย์ขององค์ประกอบที่ไม่ซ้ำกันจากอาร์เรย์ที่ส่งผ่านไป
function uniqueElements(arrayValue) {
  const uniqueSet = new Set(arrayValue);
  return Array.from(uniqueSet);
}

// ตัวอย่างการใช้งาน
let numbers = [1, 1, 3, 8, 21, 8, 13, 3, 8, 7];

const uniqueNumbers = uniqueElements(numbers);

console.log(uniqueNumbers); // [1, 3, 8, 21, 13, 7]

// 13.ฟังก์ชัน reverseArray(arrayValue) ใช้เพื่อย้อนกลับลำดับขององค์ประกอบในอาร์เรย์ที่ส่งผ่านไป
function reverseArray(arrayValue) {
  const reversedArray = [];
  for (let i = arrayValue.length - 1; i >= 0; i--) {
    reversedArray.push(arrayValue[i]);
  }
  return reversedArray;
}

// ตัวอย่างการใช้งาน
let numbers = [1, 1, 3, 8, 21, 8, 13, 3, 8, 7];

const reversedNumbers = reverseArray(numbers);

console.log(reversedNumbers); // [7, 8, 3, 13, 8, 21, 8, 3, 1, 1]

// 14.โค้ด JavaScript ในภาพใช้ destructuring  เพื่อดึงข้อมูลจากอาร์เรย์ของวัตถุ
const users = [
  { id: 1, name: "John", age: 28 },
  { id: 2, name: "Jane", age: 32 },
  { id: 3, name: "Dave", age: 24 }
];

users.forEach((user) => {
  const { id, name, age } = user;
  console.log(`ID: ${id}, Name: ${name}, Age: ${age}`);
});

// 15.โค้ด JavaScript ในภาพใช้ destructuring
// เพื่อดึงองค์ประกอบสองตัวแรกและองค์ประกอบสุดท้ายจากอาร์เรย์
const numbers = [1, 2, 3, 4, 5];

const [firstTwo, ...rest] = numbers;
const lastElement = numbers[numbers.length - 1];

console.log(firstTwo); // [1, 2]
console.log(rest); // [3, 4, 5]
console.log(lastElement); // 5

// 16.JavaScript ที่ใช้ destructuring
const users = [
  { id: 1, name: "Alice", email: "alice@example.com" },
  { id: 2, name: "Bob", email: "bob@example.com" }
];

const { usersList, userCount } = users;
const { id, name, email } = currentUser;

console.log(`จำนวนผู้ใช้: ${userCount}`);
console.log(`ผู้ใช้: ${name} (${email})`);

// 17.JavaScript ที่ใช้ destructuring กับ object
const data = {
  name: "Alice",
  age: 28,
  address: {
    city: "Bangkok",
    postalCode: "10400"
  }
};

const { name, age } = data;
const { city, postalCode } = data.address;

console.log(`ชื่อ: ${name}`);
console.log(`อายุ: ${age}`);
console.log(`เมือง: ${city}`);
console.log(`รหัสไปรษณีย์: ${postalCode}`);

// 18.JavaScript ที่ใช้ destructuring กับ object
const data = {
  name: "Alice",
  age: 28,
  address: {
    city: "Bangkok",
    postalCode: "10400"
  }
};

const { name, age } = data;
const { city, postalCode } = data.address || {};

console.log(`ชื่อ: ${name}`);
console.log(`อายุ: ${age}`);
console.log(`เมือง: ${city}`);
console.log(`รหัสไปรษณีย์: ${postalCode}`);

// 19.โค้ดใช้ destructuring แยก object data ออกเป็น 4 ตัวแปร:
const data = {
  name: "Alice",
  age: 28,
  address: {
    city: "Bangkok",
    postalCode: "10400"
  },
  interests: ["Reading", "Cooking", "Traveling"]
};

const { name, age } = data;
const { city, postalCode } = data.address || {};
const interests = data.interests || [];
const [hobby, ...otherInterests] = interests;

console.log(`ชื่อ: ${name}`);
console.log(`อายุ: ${age}`);
console.log(`เมือง: ${city}`);
console.log(`รหัสไปรษณีย์: ${postalCode}`);
console.log(`ความสนใจหลัก: ${hobby}`);
console.log(`ความสนใจอื่นๆ: ${otherInterests}`);

// 20.JavaScript ที่ใช้ destructuring กับ object
const data = {
  name: "Alice",
  age: 28,
  address: {
    city: "Bangkok",
    postalCode: "10400"
  },
  interests: ["Reading", "Cooking", "Traveling"]
};

const { name, age, address, interests } = data;
const { city, zip: postalCode = "UNKNOWN" } = address;
const [hobby, ...otherInterests] = interests ?? [];
const allInterests = [hobby, ...otherInterests];

console.log(`ชื่อ: ${name}`);
console.log(`อายุ: ${age}`);
console.log(`เมือง: ${city}`);
console.log(`รหัสไปรษณีย์: ${postalCode}`);
console.log(`ความสนใจหลัก: ${hobby}`);
console.log(`ความสนใจอื่นๆ: ${otherInterests}`);
console.log(`ความสนใจทั้งหมด: ${allInterests}`);
