// 1. สร้างฟังก์ชัน calculateBMI สำหรับคำนวณดัชนีมวลกาย (BMI)
function calculateBMI(weight, height) {
  // คำนวณ BMI ด้วยสูตร
  const bmi = weight / (height * height);
  return bmi;
}

// 2. สร้างฟังก์ชัน getBMIMeaning เพื่อคำนวณ BMI และคืนค่าข้อความเกี่ยวกับภาวะน้ำหนักตัว
function getBMIMeaning(weight, height) {
  // เรียกใช้ฟังก์ชัน calculateBMI เพื่อคำนวณ BMI
  const bmi = calculateBMI(weight, height);

  // ตรวจสอบและคืนค่าข้อความตามช่วงของ BMI
  if (bmi < 18.5) {
    return "Underweight";
  } else if (bmi >= 18.5 && bmi <= 24.9) {
    return "Normal weight";
  } else {
    return "Overweight";
  }
}

// ตัวอย่างการใช้งาน
console.log(getBMIMeaning(65, 1.8)); // จะได้ "Normal weight"
console.log(getBMIMeaning(80, 1.7)); // จะได้ "Overweight"
console.log(getBMIMeaning(44, 1.6)); // จะได้ "Underweight"
// ---------------------------------------------------------------------

function minMedMax(num1, num2, num3) {
  // หาค่าน้อยที่สุด
  let min = num1;
  if (num2 < min) {
    min = num2;
  }
  if (num3 < min) {
    min = num3;
  }

  // หาค่ามากที่สุด
  let max = num1;
  if (num2 > max) {
    max = num2;
  }
  if (num3 > max) {
    max = num3;
  }

  // หาค่ากลาง
  let mid;
  if (num1 !== min && num1 !== max) {
    mid = num1;
  } else if (num2 !== min && num2 !== max) {
    mid = num2;
  } else {
    mid = num3;
  }

  // สร้าง object ผลลัพธ์และคืนค่า
  const result = {
    min: min,
    mid: mid,
    max: max
  };
  return result;
}

// ตัวอย่างการใช้งาน
console.log(minMedMax(85, 30, 1)); // จะได้ { min: 1, mid: 30, max: 85 }
console.log(minMedMax(10, 0, 20)); // จะได้ { min: 0, mid: 10, max: 20 }
console.log(minMedMax(-5, 0, 10)); // จะได้ { min: -5, mid: 0, max: 10 }
console.log(minMedMax(5, 1, 1)); // จะได้ { min: 1, mid: 1, max: 5 }
console.log(minMedMax(-1, -8, 0)); // จะได้ { min: -8, mid: -1, max: 0 }
// -------------------------------------------------------------------------
function concatArray(array1, array2) {
  // กรณีที่ array1 และ array2 มีค่าเป็น null หรือ undefined
  if ((array1 === null || array1 === undefined) && 
  (array2 === null || array2 === undefined)) {
    return undefined;
  }
  
  // กรณีที่ array1 เป็น null หรือ undefined
  if (array1 === null || array1 === undefined) {
    return array2;
  }
  
  // กรณีที่ array2 เป็น null หรือ undefined
  if (array2 === null || array2 === undefined) {
    return array1;
  }
  
  // กรณีที่ array1 และ array2 เป็น empty array
  if (array1.length === 0 && array2.length === 0) {
    return [];
  }
  
  // กรณีที่ array1 เป็น empty array
  if (array1.length === 0) {
    return array2;
  }
  
  // กรณีที่ array2 เป็น empty array
  if (array2.length === 0) {
    return array1;
  }
  
  // กรณีที่ array1 และ array2 มีค่า
  const result = array1.concat(array2);
  return result;
}

// ตัวอย่างการใช้งาน
console.log(concatArray([5, 10, 15], [2, 4, 6, 7])); // [ 5, 10, 15, 2, 4, 6, 7]
console.log(concatArray([], ['item1', 'item2', 'item3'])); // [ 'item1', 'item2', 'item3' ]
console.log(concatArray([10, 6, 5], [])); // [ 10, 6, 5 ]
console.log(concatArray([], [])); // []
console.log(concatArray(undefined, [2, 4, 6, 7])); // [ 2, 4, 6, 7 ]
console.log(concatArray([2, 4, 6, 7], null)); // [ 2, 4, 6, 7 ]
console.log(concatArray(undefined, undefined)); // undefined
console.log(concatArray(null, undefined)); // undefined
console.log(concatArray(undefined, null)); // undefined

// ---------------------------------------------------------------

function fillStartWord(startWord, word) {
  // กรณีที่ word เป็น null หรือ undefined
  if (word === null || word === undefined) {
    return undefined;
  }

  // ตรวจสอบว่า word มี startWord อยู่แล้วหรือไม่
  if (word.startsWith(startWord)) {
    return word;
  } else {
    // เติม startWord ลงใน word และคืนค่า
    return startWord + word;
  }
}

// ตัวอย่างการใช้งาน
console.log(fillStartWord("1-2565-", "Hello World")); // "1-2565-Hello World"
console.log(fillStartWord("JS", "beginner")); // "JSbeginner"
console.log(fillStartWord("first", "firststep")); // "firststep"
console.log(fillStartWord("first", null)); // undefined
console.log(fillStartWord("first", undefined)); // undefined

if (word.startsWith(startWord)) {
  return word;
} else {
  return startWord + word;
}

// ----------------------------------------------------------------
function getMaxLengthString(arrayOfString) {
  // กรณีที่ arrayOfString เป็น null หรือ undefined
  if (arrayOfString === null || arrayOfString === undefined) {
    return undefined;
  }

  // สร้างตัวแปรสำหรับเก็บความยาวของสตริงที่มากที่สุด
  let maxLength = 0;
  // สร้างตัวแปรสำหรับเก็บสตริงที่มีความยาวมากที่สุด
  let maxLengthStrings = [];

  // วนลูปผ่านสตริงใน arrayOfString
  for (const str of arrayOfString) {
    // หาความยาวของสตริง
    const strLength = str.length;

    // ถ้าความยาวของสตริงมากกว่า maxLength ให้รีเซ็ต maxLength และ maxLengthStrings เป็นสตริงนี้
    if (strLength > maxLength) {
      maxLength = strLength;
      maxLengthStrings = [str];
    }
    // ถ้าความยาวของสตริงเท่ากับ maxLength ให้เพิ่มสตริงนี้เข้าไปใน maxLengthStrings
    else if (strLength === maxLength) {
      maxLengthStrings.push(str);
    }
  }

  return maxLengthStrings;
}

// ตัวอย่างการใช้งาน
console.log(getMaxLengthString(['hello', 'hi', 'hey'])); // ['hello']
console.log(getMaxLengthString(['hello', 'hi', 'hey', 'Good Evening', 'Good Morning'])); // ['Good Evening', 'Good Morning']
console.log(getMaxLengthString(['hi'])); // ['hi']
console.log(getMaxLengthString(null)); // undefined
console.log(getMaxLengthString(undefined)); // undefined

// ---------------------------------------------------------------------

function countCovidStatus(covidStatusArray) {
  // กรณีที่ covidStatusArray เป็น null หรือ undefined
  if (covidStatusArray === null || covidStatusArray === undefined) {
    return undefined;
  }

  // สร้างอ็อบเจ็กต์สำหรับเก็บผลลัพธ์
  const result = {};

  // วนลูปผ่านรายการสถานะใน covidStatusArray
  for (const status of covidStatusArray) {
    // ตรวจสอบว่าสถานะนี้เป็นสถานะโควิดที่เราสนใจหรือไม่
    if (status === 'negative and low risk' || status === 'negative and high risk' || status === 'positive') {
      // หากสถานะนี้มีอยู่แล้วในผลลัพธ์ ให้เพิ่มจำนวนคนในสถานะนี้ขึ้น
      if (result.hasOwnProperty(status)) {
        result[status]++;
      } else {
        // หากยังไม่มีสถานะนี้ในผลลัพธ์ ให้เพิ่มสถานะนี้และกำหนดจำนวนคนเป็น 1
        result[status] = 1;
      }
    }
  }

  // ถ้าไม่มีรายการที่ต้องนับ ให้คืนเป็น empty object
  if (Object.keys(result).length === 0) {
    return {};
  }

  return result;
}

// ตัวอย่างการใช้งาน
console.log(countCovidStatus(['negative and low risk', 'positive', 'negative and low risk', 'negative and high risk', 'positive', 'negative and low risk']));
console.log(countCovidStatus(['positive', 'negative and low risk', 'positive']));
console.log(countCovidStatus(['negative and low risk', 'positive', 'negative and low risk', 'abnormal', 'negative and high risk', 'positive', 'normal']));
console.log(countCovidStatus(['covid']));
console.log(countCovidStatus([]));
console.log(countCovidStatus(null));
console.log(countCovidStatus(undefined));
